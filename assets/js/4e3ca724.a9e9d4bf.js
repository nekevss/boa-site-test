"use strict";(self.webpackChunkboajs_dev=self.webpackChunkboajs_dev||[]).push([[5479],{3905:(e,t,n)=>{n.d(t,{Zo:()=>b,kt:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),h=s(n),y=o,c=h["".concat(i,".").concat(y)]||h[y]||d[y]||a;return n?r.createElement(c,p(p({ref:t},b),{},{components:n})):r.createElement(c,p({ref:t},b))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=y;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:o,p[1]=l;for(var s=2;s<a;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},p="Shapes (Hidden Classes)",l={unversionedId:"optimizations/shapes",id:"optimizations/shapes",title:"Shapes (Hidden Classes)",description:"The best way to explain object shapes is through examples. It all begins with the root shape.",source:"@site/docs/optimizations/shapes.md",sourceDirName:"optimizations",slug:"/optimizations/shapes",permalink:"/boa-site-test/docs/optimizations/shapes",draft:!1,editUrl:"https://github.com/boa-dev/boa-dev.github.io/tree/main/docs/docs/optimizations/shapes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"infoSidebar",previous:{title:"Overview",permalink:"/boa-site-test/docs/optimizations/overview"},next:{title:"Profiling",permalink:"/boa-site-test/docs/profiling"}},i={},s=[],b={toc:s},h="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"shapes-hidden-classes"},"Shapes (Hidden Classes)"),(0,o.kt)("p",null,"The best way to explain object shapes is through examples. It all begins with the root shape."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n\n    Root(<b>Root Shape</b>\\n<b>Prototype:</i> <i>None</i>) --\x3e| Property Count 0 | PropertyTable(PropertyTable\\n)\n")),(0,o.kt)("p",null,"The root shape is where the transition chain starts from, it has a pointer to a ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable"),",\nwe will explain what it is and does later on!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE:")," We will annotate the shapes with ",(0,o.kt)("inlineCode",{parentName:"p"},"S")," followed by a number."),(0,o.kt)("p",null,"If we have an example of JavaScript code like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let o = {};\n")),(0,o.kt)("p",null,"The following chain is created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\n<b>Prototype:</b> <i>None</i>) --\x3e|Property Count: 0| PropertyTable(PropertyTable\\n)\n\n    ObjectPrototype(<b>S1: Prototype Shape</b>\\n<b>Prototype:</b> Object.prototype) --\x3e|Property Count: 0|PropertyTable\n    ObjectPrototype:::New --\x3e|Previous| Root\n")),(0,o.kt)("p",null,"We transition, the object ",(0,o.kt)("inlineCode",{parentName:"p"},"o")," has ",(0,o.kt)("inlineCode",{parentName:"p"},"S1")," shape. The root shape does not have a prototype. So we transition into a shape that has the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Object.prototype")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"__proto__"),". We can see that the shapes inherited the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"."),(0,o.kt)("p",null,"Ok, Let us add a property ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"o.x = 100; // The value is not important!\n")),(0,o.kt)("p",null,"Then this happens:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\nPrototype: <i>None</i>) --\x3e|Property Count: 0| PropertyTable(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable)\n\n    ObjectPrototype(<b>S1: Prototype Shape</b>\\n<b>Prototype:</b> <i>Object.prototype</i>) --\x3e|Property Count: 0|PropertyTable\n    ObjectPrototype --\x3e|Previous| Root\n\n    InsertX(<b>S2: Insert Shape</b>\\n<b>Property:</b> '<i>x</i>') --\x3e |Property Count: 1|PropertyTable\n    InsertX:::New --\x3e|Previous| ObjectPrototype\n")),(0,o.kt)("p",null,"The object ",(0,o.kt)("inlineCode",{parentName:"p"},"o")," has shape ",(0,o.kt)("inlineCode",{parentName:"p"},"S2")," shape now, we can see that it also inherited the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable"),", but it's property count is ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and\nan entry has been added into the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable"),"."),(0,o.kt)("p",null,"We can see that the property added is ",(0,o.kt)("inlineCode",{parentName:"p"},"writable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"configurable"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"enumerable"),", but we also see ",(0,o.kt)("inlineCode",{parentName:"p"},"Slot 0"),",\nthis is the index into the dense storage in the object itself."),(0,o.kt)("p",null,"Here is how it would look with the ",(0,o.kt)("inlineCode",{parentName:"p"},"o")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\n<b>Prototype:</b> <i>None</i>) --\x3e| Property Count: 0 | PropertyTable(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable)\n\n    ObjectPrototype(<b>S1: Prototype Shape</b>\\n<b>Prototype:</b> <i>Object.prototype</i>) --\x3e| Property Count: 0 |PropertyTable\n    ObjectPrototype --\x3e|Previous| Root\n\n    InsertX(<b>S2: Insert Shape</b>\\n<b>Property:</b> '<i>x</i>') --\x3e | Property Count: 1 | PropertyTable\n    InsertX --\x3e|Previous| ObjectPrototype\n\n    O(<b>Object o</b>\\n<b>Element 0:</b> JsValue: <i>100</i>)\n    O:::New --\x3e InsertX\n")),(0,o.kt)("p",null,"Let's define a getter and setter ",(0,o.kt)("inlineCode",{parentName:"p"},"y")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// What the getter/setter are not important!\nObject.defineProperty(o, "y", {\n  enumerable: true,\n  configurable: true,\n  get: function () {\n    return this.x;\n  },\n  set: function (value) {\n    this.x = value;\n  },\n});\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\n<b>Prototype:</b> <i>None</i>) --\x3e|Property Count: 0| PropertyTable(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable\\ny: Slot 1, has_get, has_set, configurable, enumerable)\n\n    ObjectPrototype(<b>S1: Prototype Shape</b>\\n<b>Prototype:</b> <i>Object.prototype</i>) --\x3e| Property Count: 0 |PropertyTable\n    ObjectPrototype --\x3e|Previous| Root\n\n    InsertX(<b>S2: Insert Shape</b>\\n<b>Property:</b> '<i>x</i>') --\x3e |Property Count: 1| PropertyTable\n    InsertX --\x3e|Previous| ObjectPrototype\n\n    InsertY(<b>S3: Insert Shape</b>\\n<b>Property:</b> '<i>y</i>') --\x3e |Property Count: 2| PropertyTable\n    InsertY:::New --\x3e|Previous| InsertX\n\n    O(<b>Object o\\nElement 0:</b> JsValue: 100\\n<b>Element 1:</b> JsValue: func\\n<b>Element 2:</b> JsValue: func) --\x3e InsertY\n")),(0,o.kt)("p",null,"We can see that the property has been added into the property table, it has the ",(0,o.kt)("inlineCode",{parentName:"p"},"has_get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"has_set")," flags set,\nin the object there are two elements added, the first is the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," function and the second is the ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," function."),(0,o.kt)("p",null,"Slots are varying in length, two for accessor properties and one for data properties, the index points to the first\nvalue in the object storage."),(0,o.kt)("p",null,"What would happen if an object had ",(0,o.kt)("inlineCode",{parentName:"p"},"S2")," shape and we tried to access a property ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," how does it know if it\nhas or doesn't have a property named ",(0,o.kt)("inlineCode",{parentName:"p"},"y"),"? By the property count on the shape, it has property count ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),",\nall the object in the ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable")," are stored in a map that preserves the order and and can be indexed."),(0,o.kt)("p",null,"When we do a lookup the on property table, if the index of the property is greater than the property count (",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"),\nthan it does not belong to the shape."),(0,o.kt)("p",null,"Now, Let's create a new object ",(0,o.kt)("inlineCode",{parentName:"p"},"o2"),", with property ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let o2 = { x: 200 };\n")),(0,o.kt)("p",null,"After this ",(0,o.kt)("inlineCode",{parentName:"p"},"o2")," would have the ",(0,o.kt)("inlineCode",{parentName:"p"},"S2")," shape."),(0,o.kt)("p",null,"How does the shape know that it can reuse ",(0,o.kt)("inlineCode",{parentName:"p"},"S1")," then to go to ",(0,o.kt)("inlineCode",{parentName:"p"},"S2"),"? This is not the real structure!\nEvery shape has pointers to forward transitions that happened, these are weak pointers so we don't keep\nalive unused shapes. The pointers have been omitted, so the diagrams are clearer (too many arrows)."),(0,o.kt)("p",null,"Ok, now let us define a property ",(0,o.kt)("inlineCode",{parentName:"p"},"z")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"y"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"o2.z = 300;\n")),(0,o.kt)("p",null,"The following changes accure to the shape tree:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n    style PropertyTableFork fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\n<b>Prototype:</b> <i>None</i>) --\x3e| Property Count: 0 | PropertyTable(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable\\ny: Slot 1, has_get, has_set, configurable, enumerable)\n\n    ObjectPrototype(<b>S1: Prototype Shape\\nPrototype:</b> <i>Object.prototype</i>) --\x3e| Property Count: 0 |PropertyTable\n    ObjectPrototype --\x3e|Previous| Root\n\n    InsertX(<b>S2: Insert Shape\\nProperty:</b> '<i>x</i>') --\x3e | Property Count: 1 | PropertyTable\n    InsertX --\x3e|Previous| ObjectPrototype\n\n    InsertY(<b>S3: Insert Shape\\nProperty:</b> '<i>y</i>') --\x3e | Property Count: 2 | PropertyTable\n    InsertY --\x3e|Previous| InsertX\n\n    PropertyTableFork(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable\\nz: Slot 1, writable, configurable, enumerable)\n    InsertZ(<b>S4: Insert Shape\\nProperty:</b> '<i>z</i>') --\x3e | Property Count: 2 | PropertyTableFork:::New\n    InsertZ:::New --\x3e|Previous| InsertX\n\n    O(<b>Object o\\nElement 0:</b> JsValue: 100\\n<b>Element 1:</b> JsValue: func\\n<b>Element 2:</b> JsValue: func) --\x3e InsertY\n    O2(<b>Object o2\\nElement 0:</b> JsValue: 200\\n<b>Element 1:</b> JsValue: 300)\n    O2:::New --\x3e InsertZ\n")),(0,o.kt)("p",null,"Now ",(0,o.kt)("inlineCode",{parentName:"p"},"o2")," has ",(0,o.kt)("inlineCode",{parentName:"p"},"S4")," shape. We can also see that ",(0,o.kt)("inlineCode",{parentName:"p"},"PropertyTable")," has been forked, because we can no longer add a property at position ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,o.kt)("p",null,"What would happen if we wanted to delete a property ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," from object ",(0,o.kt)("inlineCode",{parentName:"p"},"o"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"delete o.x;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\n    classDef New style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n    style Root stroke:#000,stroke-width:5px\n    style PropertyTable fill:#071E22\n    style PropertyTableFork fill:#071E22\n\n    Root(<b>S0: Root Shape</b>\\n<b>Prototype:</b> <i>None</i>) --\x3e| Property Count: 0 | PropertyTable(<b>PropertyTable</b>\\nx: Slot 0, writable, configurable, enumerable\\ny: Slot 1, has_get, has_set, configurable, enumerable)\n\n    ObjectPrototype(<b>S1: Prototype Shape\\nPrototype:</b> <i>Object.prototype</i>) --\x3e| Property Count: 0 |PropertyTable\n    ObjectPrototype --\x3e|Previous| Root\n\n\n    PropertyTableFork(<b>PropertyTable</b>\\ny: Slot 0, has_get, has_set, configurable, enumerable)\n    InsertYNew(<b>S3: Insert Shape\\nProperty:</b> <i>y</i>) --\x3e | Property Count: 1 |PropertyTableFork:::New\n    InsertYNew:::New --\x3e|Previous| ObjectPrototype\n\n    O(<b>Object o</b>\\n<b>Element 0:</b> JsValue: func\\n<b>Element 1:</b> JsValue: func) --\x3e InsertYNew\n    O:::New\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE:"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"o2")," and its shape have been omitted from the diagram."),(0,o.kt)("p",null,"When a deletion happens, we find the node in the chain where we added the property, and get it's parent (",(0,o.kt)("inlineCode",{parentName:"p"},"base"),"),\nwe also remember that what transitions happened after the property insertion, then we apply them\none by one until we construct the chain and return the last shape in that chain."))}d.isMDXComponent=!0}}]);